from my_data import *
import tensorflow as tf
-. . -..- - / . -. - .-. -.--
X_train, X_test, y_train, y_test, X, y = get_traing_and_testing_data()

-. . -..- - / . -. - .-. -.--
loaded_model = tf.keras.models.load_model('my_model/best_model.h5')

-. . -..- - / . -. - .-. -.--
y_predications = loaded_model.predict(y_test)
-. . -..- - / . -. - .-. -.--
y_test
-. . -..- - / . -. - .-. -.--
from my_data import *
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
-. . -..- - / . -. - .-. -.--
X_train, X_test, y_train, y_test, X, y = get_traing_and_testing_data()
loaded_model = tf.keras.models.load_model('my_model/best_model.h5')
y_predications = loaded_model.predict(X_test)

-. . -..- - / . -. - .-. -.--
y_predications
-. . -..- - / . -. - .-. -.--
import numpy as np
-. . -..- - / . -. - .-. -.--
np.ravel(y_predications)
-. . -..- - / . -. - .-. -.--
scaler = MinMaxScaler()
normailzed_y_test = scaler.fit_transform(np.ravel(y_test.values))
normailzed_y_predications = scaler.fit_transform(y_predications.values)
-. . -..- - / . -. - .-. -.--
scaler = MinMaxScaler()

-. . -..- - / . -. - .-. -.--
normailzed_y_predications = scaler.fit_transform(y_predications.values)

-. . -..- - / . -. - .-. -.--
normailzed_y_predications = scaler.fit_transform(y_predications)

-. . -..- - / . -. - .-. -.--
scaler = MinMaxScaler()
normailzed_y_test = scaler.fit_transform(np.ravel(y_test))
normailzed_y_predications = scaler.fit_transform(y_predications)
-. . -..- - / . -. - .-. -.--
normailzed_y_predications = scaler.fit_transform(y_predications)
-. . -..- - / . -. - .-. -.--
np.ravel(y_test)
-. . -..- - / . -. - .-. -.--
normailzed_y_predications
-. . -..- - / . -. - .-. -.--
normailzed_y_predications.reshape(-1, 1)
-. . -..- - / . -. - .-. -.--
np.ravel(normailzed_y_predications)
-. . -..- - / . -. - .-. -.--
normailzed_y_test = scaler.fit_transform(y_test)

-. . -..- - / . -. - .-. -.--
normailzed_y_test = np.ravel(scaler.fit_transform(np.ravel(y_test)))
normailzed_y_predications = np.ravel(scaler.fit_transform(y_predications))
-. . -..- - / . -. - .-. -.--
normailzed_y_test = np.ravel(scaler.fit_transform(np.ravel(y_test)))

-. . -..- - / . -. - .-. -.--
normailzed_y_test = scaler.fit_transform(np.ravel(y_test))

-. . -..- - / . -. - .-. -.--
scaler = MinMaxScaler()
normailzed_y_test = np.ravel(scaler.fit_transform(np.ravel(y_test)).reshape(-1, 1))
normailzed_y_predications = np.ravel(scaler.fit_transform(y_predications).reshape(-1, 1))
-. . -..- - / . -. - .-. -.--
normailzed_y_test = scaler.fit_transform(np.ravel(y_test))
-. . -..- - / . -. - .-. -.--
normailzed_y_test = scaler.fit_transform(np.ravel(y_test).reshape(-1, 1))

-. . -..- - / . -. - .-. -.--
normailzed_y_test = np.ravel(scaler.fit_transform(np.ravel(y_test).reshape(-1, 1)))

-. . -..- - / . -. - .-. -.--
normailzed_y_test = np.ravel(scaler.fit_transform(np.ravel(y_predications).reshape(-1, 1)))

-. . -..- - / . -. - .-. -.--
normailzed_y_test
-. . -..- - / . -. - .-. -.--
normailzed_y_test = np.ravel(scaler.fit_transform(np.ravel(y_test).reshape(-1, 1)))
normailzed_y_predications = np.ravel(scaler.fit_transform(np.ravel(y_predications).reshape(-1, 1)))
-. . -..- - / . -. - .-. -.--
# Define a function to calculate the Euclidean distance between two 6-dimensional vectors

    # Define a threshold for the distance between 6-dimensional X values
    distance_threshold = 0.0155  # Adjust this threshold based on your data and requirements

    # Extract the 6-dimensional X values from the DataFrame
    X = df.iloc[:, :6].values

    # Calculate pairwise distances using vectorized operations
    distances = np.sqrt(np.sum((X[:, np.newaxis] - X) ** 2, axis=-1))

    # Set the diagonal elements (distance to itself) to a large value to exclude them
    np.fill_diagonal(distances, np.inf)

    # Find rows where the distance between 6-dimensional X values is below the threshold
    close_rows = np.where((distances < distance_threshold))

    # Filter the data based on the distance threshold
    filtered_indices = np.setdiff1d(np.arange(len(df)), close_rows[0])
    filtered_df = df.iloc[filtered_indices]

-. . -..- - / . -. - .-. -.--
filtered_df
-. . -..- - / . -. - .-. -.--
len(df)
-. . -..- - / . -. - .-. -.--
len(filtered_df)
-. . -..- - / . -. - .-. -.--
distances
-. . -..- - / . -. - .-. -.--
pd.dataFrame(distances)
-. . -..- - / . -. - .-. -.--
pd.dataFram(distances)
-. . -..- - / . -. - .-. -.--
pd.DataFram(distances)
-. . -..- - / . -. - .-. -.--
pd.DataFrame(distances).head()
-. . -..- - / . -. - .-. -.--
pd.DataFrame(distances).all()
-. . -..- - / . -. - .-. -.--
pd.DataFrame(distances)
-. . -..- - / . -. - .-. -.--
distances.shap
-. . -..- - / . -. - .-. -.--
close_rows.shape
-. . -..- - / . -. - .-. -.--
distances.shape
-. . -..- - / . -. - .-. -.--
x 
-. . -..- - / . -. - .-. -.--
x = set(close_rows[0])
-. . -..- - / . -. - .-. -.--
x = close_rows[0] 
y= close_rows[1]

-. . -..- - / . -. - .-. -.--
final_set = set(x)
-. . -..- - / . -. - .-. -.--
final_list = x
-. . -..- - / . -. - .-. -.--
final_set = set()
-. . -..- - / . -. - .-. -.--
final_list
-. . -..- - / . -. - .-. -.--
final_set 
-. . -..- - / . -. - .-. -.--
close_rows
-. . -..- - / . -. - .-. -.--
matching_indices[1:-1]
-. . -..- - / . -. - .-. -.--
matching_indices[0:-1]
-. . -..- - / . -. - .-. -.--
matching_indices[1:]
-. . -..- - / . -. - .-. -.--
matching_indices[matching_indices != i]
-. . -..- - / . -. - .-. -.--
np.concatenate(close_rows)
-. . -..- - / . -. - .-. -.--
ary
-. . -..- - / . -. - .-. -.--
pd.DataFram(ary)
-. . -..- - / . -. - .-. -.--
pd.DataFrame(ary)
-. . -..- - / . -. - .-. -.--
pd.DataFrame(ary).head()
-. . -..- - / . -. - .-. -.--
pd.DataFrame(ary).head(10)
-. . -..- - / . -. - .-. -.--
df['N Test (kN)']
-. . -..- - / . -. - .-. -.--
scaler.inverse_transform(df['N Test (kN)'])
-. . -..- - / . -. - .-. -.--
scaler.inverse_transform(df['N Test (kN)'].valuse)
-. . -..- - / . -. - .-. -.--
scaler.inverse_transform(df.valuse)
-. . -..- - / . -. - .-. -.--
scaler.inverse_transform(df.values)
-. . -..- - / . -. - .-. -.--
scaler.inverse_transform(df)
-. . -..- - / . -. - .-. -.--
pd.DataFrame(scaler.inverse_transform(df.iloc[:, :6].values))
-. . -..- - / . -. - .-. -.--
df.iloc[:, :7] = pd.DataFrame(scaler.fit_transform(df.iloc[:, :7].values))

-. . -..- - / . -. - .-. -.--
pd.DataFrame(scaler.fit_transform(df.iloc[:, :7].values))

-. . -..- - / . -. - .-. -.--
pd.DataFrame(scaler.fit_transform(df.values))

-. . -..- - / . -. - .-. -.--
pd.DataFrame(scaler.inverse_transform(df.values))
-. . -..- - / . -. - .-. -.--
df == df.iloc[:, :7].values
-. . -..- - / . -. - .-. -.--
df == df
-. . -..- - / . -. - .-. -.--
df.valuse == df.iloc[:, :7].values
-. . -..- - / . -. - .-. -.--
df.values == df.iloc[:, :7].values
-. . -..- - / . -. - .-. -.--
df.iloc[:, :6]
-. . -..- - / . -. - .-. -.--
df.iloc[:, :7]
-. . -..- - / . -. - .-. -.--
pd.DataFrame(scaler.fit_transform(df.iloc[:, :7].values))
-. . -..- - / . -. - .-. -.--
pd.DataFrame(scaler.inverse_transform(df.iloc[:, :7].values))
-. . -..- - / . -. - .-. -.--
df[6]
-. . -..- - / . -. - .-. -.--
df.iloc
-. . -..- - / . -. - .-. -.--
df.iloc[6]
-. . -..- - / . -. - .-. -.--
df.iloc[7]
-. . -..- - / . -. - .-. -.--
df.iloc[:7]
-. . -..- - / . -. - .-. -.--
df.iloc[:6:7]
-. . -..- - / . -. - .-. -.--
df.iloc[6::7]
-. . -..- - / . -. - .-. -.--
df.iloc[:0:7]
-. . -..- - / . -. - .-. -.--
df.iloc[:4:7]
-. . -..- - / . -. - .-. -.--
pd.DataFrame(scaler.inverse_transform(df.iloc[:, :7].values))[6]
-. . -..- - / . -. - .-. -.--
df['N Test (kN)'] = pd.DataFrame(scaler.inverse_transform(df.iloc[:, :7].values))[6]
-. . -..- - / . -. - .-. -.--
df['N Test (kN)'] = pd.DataFrame(scaler.inverse_transform(df.iloc[:, :7].values))[6].values
-. . -..- - / . -. - .-. -.--
df
-. . -..- - / . -. - .-. -.--
import pandas as pd
-. . -..- - / . -. - .-. -.--
pd.DataFrame()
-. . -..- - / . -. - .-. -.--
pd.DataFrame(outlier_filter())
-. . -..- - / . -. - .-. -.--
pd.DataFrame(outlier_scores)
-. . -..- - / . -. - .-. -.--
pd.DataFrame(outlier_scores).description()
-. . -..- - / . -. - .-. -.--
pd.DataFrame(outlier_scores).describe()
-. . -..- - / . -. - .-. -.--
[True,False,True]
-. . -..- - / . -. - .-. -.--
~[True,False,True]